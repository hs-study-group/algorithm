//https://school.programmers.co.kr/learn/courses/30/lessons/12980

import java.util.*;

public class Solution {
    public int solution(int n) {
        int ans = 0;

        while(n>0){
            if(n%2==0){
            	//n번째칸이 짝수라면, 순간이동을 통해 n/2 에서 n으로 오는 것이 건전지를 아끼는 최고의 방범임
            	//따라서, n으로 오기위해 거쳤던 n/2지점을 탐색함
                n=n/2;
            }else{
            	//n번째칸이 홀수라면, 순간이동을 통해서는 절대로 해당지점에 도달할 수 없음
                //왜냐하면 순간이동은 여태까지 온 거리의 2배 만큼의 거리로 이동하는데
                //홀수칸이든 짝수칸이든, 여태까지 T칸을 왔다면 그 2배인 2*T번째칸은 반드시 짝수칸일 수 밖에 없기 때문임
                
                //n번째 칸이 홀수이므로, n-1, n-3번째 칸은 짝수임이 분명하지만
                //n-1번째 칸에서 n번째 칸으로 점프하는 것이, n-3번째 칸에서 n번째 칸으로 점프하는 것보다
                //더욱 효과적으로 건전지를 절약할 수 있음
                    
                //즉, 현재 위치한 n번째 칸이 홀수 칸이라면, 어떤 과정을 거치든 최소로 건전지를 사용하여 n-1칸으로 온 이후에
                //자신은 n-1번째 칸에서 n번째 칸으로 1칸 점프하면 됨
                n=n-1;
                
                //건전지 사용량을 카운트함
                ans++;
            }
        }

        return ans;
    }
}